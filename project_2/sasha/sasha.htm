<html><head>
    <title>INFO 5100 - Project 2</title>
    
    
      <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
      
      <script src="https://d3js.org/d3.v7.min.js"></script>
      <script src="https://d3js.org/topojson.v3.min.js"></script>
      
      <style>
      
        .neighborhood {
          fill: none;
          stroke: white;
          stroke-width: 0.5 px;
        }
        .outline {
          fill: none;
          stroke: black;
          stroke-width: 0.5px;
        }
        .tooltip {
            position: absolute;
            background-color: white;
            border: 1px solid black;
            padding: 5px;
            pointer-events: none;
            font-size: 12px;
            border-radius: 5px;
        }
        .label {
          font-style: normal;
          font-family: Arial, sans-serif;
        }
        h1 {
          font-style: normal;
          font-family: Arial, sans-serif;
        }
        body {
          font-style: normal;
          font-family: Arial, sans-serif;
        }
      
      
      
    
      </style>
    
    </head>
    <body>

      <h1>NYC 2024 Restaurant Inspection Results</h1>
      <p><i>Filter by:</i></p>
      <div class="container larger">

                      <!-- Filter dropdown menus -->
    <div class="filter">
      <label for="boroFilter">Boro:</label>
      <select id="boroFilter">
          <option value="All">All</option>
      </select>

      <label for="scoreFilter">Score:</label>
      <select id="scoreFilter">
          <option value="All">All</option>
      </select>
  </div>
      
    
      <svg id="bodytext" height="700" width="500" style="margin-right:0px"></svg>
      <svg id="choropleth" height="700" width="700" style="background: #f5f9ee; margin-top:50px" >
    
      </svg>
    
     
    

        <!-- Filter dropdown menus -->
    <div class="filter">
      <label for="boroFilter">Boro:</label>
      <select id="boroFilter">
          <option value="All">All</option>
      </select>

      <label for="scoreFilter">Score:</label>
      <select id="scoreFilter">
          <option value="All">All</option>
      </select>
  </div>


      <script id="basicmap">
    
      const svg = d3.select("#choropleth");
      const width = svg.attr("width");
      const height = svg.attr("height");
      const margin = { top: 20, right: 20, bottom: 20, left:20};
      const mapWidth = width - margin.left - margin.right;
      const mapHeight = height - margin.top - margin.bottom;
      const map = svg.append("g")
                      .attr("transform","translate("+margin.left+","+margin.top+")");
      


       // Variables for filters
      let selectedBoro = "All";
      let selectedScore = "All";


      // Tooltip variables
      let tooltipWidth = 220;
      let tooltipHeight = 80;
      

      // async function to load data and build the map
      const requestData = async function() {

      
       
        const nyctopo = await d3.json("nyctopo.json");

      
        // pick out topographic features and build d3 helpers
        var nyfeatures = topojson.feature(nyctopo,nyctopo.objects.nyc)
        var nymesh = topojson.mesh(nyctopo, nyctopo.objects.nyc);    // 'Mesh' of all outlines put together for a stroke
        var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], nyfeatures);
        var path = d3.geoPath().projection(projection);

        
        // drawing neighborhoods and outlines
        let nycPaths = map.selectAll("path.neighborhood").data(nyfeatures.features)
                         .join("path")
                         .attr("class", "neighborhood")
                         .attr("d", path);
      
        map.append("path").datum(nymesh)
           .attr("class","outline")
           .attr("d", path);
        

        // filling the each neighborhood w the right color
        map.selectAll(".neighborhood")
            .style("fill", function (d) {
              let boroName = d.properties.BoroName;
              if(boroName === "Manhattan"){ return "#AE6F8A";}
              if(boroName === "Bronx"){ return "#6C8CA3";}
              if(boroName === "Queens"){ return "#E7B41B";}
              if(boroName === "Brooklyn"){ return "#9DA140";}
              if(boroName === "Staten Island"){ return "#CD7229";}
              });
      

        // Pan and zoom

        var zoom = d3.zoom()
          .scaleExtent([1, 20])
          .translateExtent([[-50, -50], [mapWidth + 50, mapHeight + 50]])  // to lock to edges
          .on("zoom", mapZoomed);

        svg.call(zoom);
        svg.call(zoom.transform, d3.zoomIdentity);


        function mapZoomed({transform}) {    

          map.attr("transform", transform.toString() );
        
          map.select(".outline")
                    .attr("visibility", (transform.k > 3) ? "visible" : "hidden");
        
      }


      // Using the data from the CSV
      d3.csv('nyc_rest_inspect_filtered.csv').then((data) => {         

        console.log("imported")

        const scores = ['A', 'B', 'C', 'N', 'Z'];

        const boros = ['Manhattan', 'Queens', 'Brooklyn', 'Bronx', 'Staten Island'];

        // adding options to the dropdowns
        boros.forEach(boro => {
              d3.select("#boroFilter").append("option").text(boro).attr("value", boro);
          });

        scores.forEach(score => {
            d3.select("#scoreFilter").append("option").text(score).attr("value", score);
        });


        let rest_objs = [];


        // Create a smaller restaurant object with only the relevant data
        data.forEach( d => {  // data cleanup
                var dba = d['DBA'];
                var boro = d['BORO'];
                var cuisine = d['CUISINE DESCRIPTION']
                var score = d['GRADE'];
                var lat = d['Latitude'];
                var long = d['Longitude'];
                var violation = d['VIOLATION DESCRIPTION']
                var rest = {
                  name: dba,
                  boro: boro,
                  cuisine: cuisine,
                  score: score,
                  lat: lat,
                  long: long,
                  violation: violation
                };
                rest_objs.push(rest);
            });


        
        const updateMap = () => {
            map.selectAll("circle").remove(); 
            let circles = map.selectAll("circle")  //select all circle elements
            .data(rest_objs.filter(d => {
              console.log(selectedBoro)
                       const boroMatch = selectedBoro === "All" || d['boro'] === selectedBoro;
                       const ratingMatch = selectedScore === "All" || d['score'] === selectedScore;
                       return boroMatch && ratingMatch;
                   }))
            .join("circle") 
            .attr("r", function (d) {
              if(d['boro'] === "Manhattan"){  // make the manhattan dots smaller since there's so many
                return 2;
              }
              else{
                return 3;
              }
            })
            .attr("cx", function (d) {
              var xpos = d.long;
              var ypos = d.lat;
              var circlePosition = projection( [xpos,  ypos] );
              if(xpos === null || ypos === null || circlePosition === null){
                return;
              }
              return circlePosition[0];
            }) 
            .attr("cy", function (d) {
              var xpos = d.long;
              var ypos = d.lat;
              var circlePosition = projection( [xpos,  ypos] );
              if(xpos === null || ypos === null || circlePosition === null){
                return;
              }
              return circlePosition[1];
            })
            .attr("fill", "black")  
           
            
  
          var bodytext_ypos = 75

          // Adding the body text to the left of the map that explains the rating system

          const svg_body_text = d3.select("#bodytext");

          svg_body_text.append("text")  // adding the header
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos)
            .style("text-align", "left")
            .style("font-size", 24)
            .text("What are these ratings?")

          svg_body_text.append("text")  // adding the body text, painstakingly
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 30)
            .style("text-align", "left")
            .style("font-size", 16)
            .text("When you mouse over a dot, you will be shown a ")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .text("restaurant's name, cuisine type, and letter grade.")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .text("When a restaurant is inspected, it will accrue points ")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .text("for health and safety violations. A lower score is better!")


          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 40)
            .style("text-align", "left")
            .style("font-size", 16)
            .attr("font-weight", 700)
            .text("A:")
            .append("tspan")
            .attr("font-weight", 300)
            .text(" score between 0 and 13 points")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .attr("font-weight", 700)
            .text("B:")
            .append("tspan")
            .attr("font-weight", 300)
            .text(" score between 14 and 27 points")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .attr("font-weight", 700)
            .text("C:")
            .append("tspan")
            .attr("font-weight", 300)
            .text(" score higher than a 28")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .attr("font-weight", 700)
            .text("N:")
            .append("tspan")
            .attr("font-weight", 300)
            .text(" not yet graded")

          svg_body_text.append("text")
            .attr("class", "bodytext")
            .attr("x", 50)
            .attr("y", bodytext_ypos += 20)
            .style("text-align", "left")
            .style("font-size", 16)
            .attr("font-weight", 700)
            .text("Z:")
            .append("tspan")
            .attr("font-weight", 300)
            .text(" grade pending")


          // Getting the tooltip ready

          let tooltip = map.append("g")
            .attr("class", "tooltip")
            .attr("visibility", "hidden");
          tooltip.append("rect")
            .attr("fill", "white")
            .attr('stroke', 'black')
            .attr("opacity", 0.9)
            .attr("x", -tooltipWidth / 2.0)
            .attr("y", 0)
            .attr("width", tooltipWidth)
            .attr("height", tooltipHeight)

          let tooltip_name = tooltip.append("text")
            .attr("fill", "black")
            .attr("text-anchor", "middle")
            .attr("alignment-baseline", "hanging")
            .attr("x", 0)
            .attr("y", 5);

          let tooltip_boro = tooltip.append("text")
            .attr("fill", "black")
            .attr("text-anchor", "middle")
            .attr("alignment-baseline", "hanging")
            .attr("x", 0)
            .attr("y", 25);

          let tooltip_cuisine = tooltip.append("text")
            .attr("fill", "black")
            .attr("text-anchor", "middle")
            .attr("alignment-baseline", "hanging")
            .attr("x", 0)
            .attr("y", 45);

          let tooltip_score = tooltip.append("text")
            .attr("fill", "black")
            .attr("text-anchor", "middle")
            .attr("alignment-baseline", "hanging")
            .attr("x", 0)
            .attr("y", 65);


          circles.on("mouseover", function () { // first argument is always a string for the event. second arg for us is a function

            tooltip.style("visibility","visible")
            d3.select(this)
              .transition()
              .duration(500)
              .attr("stroke", "black")
              .attr("r", 6)

            // Getting variables to build the labels
            let name = d3.select(this).datum()['name']
            let boro = d3.select(this).datum()['boro']
            let cuisine = d3.select(this).datum()['cuisine']
            let score = d3.select(this).datum()['score']
            let violation = d3.select(this).datum()['violation']
            let lat = d3.select(this).datum()['lat']
            let long = d3.select(this).datum()['long']
            let text_pos = projection([long, lat]);

            let name_string = `Restaurant Name: ${name}`;
            let boro_string = `Borough: ${boro}`;
            let cuisine_string = `Cuisine: ${cuisine}`;
            let score_string = `Grade (Rating): ${score}`;
            let violation_string = `Violation Description: ${violation}`;


            // Appending all the text


            map.append("rect")
              .attr("class", "rect")
              .attr("x", text_pos[0])
              .attr("y", text_pos[1] - 20)
              .attr('width', 400)
              .attr('height', 90)
              .attr('stroke', 'black')
              .style("fill", function (d) {

                if (boro === "Manhattan") { return "#936ec4"; }
                if (boro === "Bronx") { return "#cf69b1"; }
                if (boro === "Queens") { return "#ff8286"; }
                if (boro === "Brooklyn") { return "#f2ba5c"; }
                if (boro === "Staten Island") { return "#cff79c"; }

              });


            tooltip.attr("transform",`translate(${text_pos[0]},${text_pos[1]})`);

            tooltip_name.text(name);
            tooltip_boro.text(boro_string);
            tooltip_cuisine.text(cuisine_string);
            tooltip_score.text(score_string);
          
            // Appending all the text



            // map.append("rect")
            //   .attr("class", "rect")
            //   .attr("x", text_pos[0])
            //   .attr("y", text_pos[1] - 20)
            //   .attr('width', 400)
            //   .attr('height', 90)
            //   .attr('stroke', 'black')
            //   .style("fill", function (d) {

            //     if (boro === "Manhattan") { return "#936ec4"; }
            //     if (boro === "Bronx") { return "#cf69b1"; }
            //     if (boro === "Queens") { return "#ff8286"; }
            //     if (boro === "Brooklyn") { return "#f2ba5c"; }
            //     if (boro === "Staten Island") { return "#cff79c"; }

            //   });

            // map.append("text")
            //   .attr("class", "label")
            //   .attr("x", text_pos[0] + 5)
            //   .attr("y", text_pos[1])
            //   .attr("text-anchor", "start")
            //   .text(name_string);

            // map.append("text")
            //   .attr("class", "label")
            //   .attr("x", text_pos[0] + 5)
            //   .attr("y", text_pos[1] + 20)
            //   .attr("text-anchor", "start")
            //   .text(boro_string);

            // map.append("text")
            //   .attr("class", "label")
            //   .attr("x", text_pos[0] + 5)
            //   .attr("y", text_pos[1] + 40)
            //   .attr("text-anchor", "start")
            //   .text(cuisine_string);

            // map.append("text")
            //   .attr("class", "label")
            //   .attr("x", text_pos[0] + 5)
            //   .attr("y", text_pos[1] + 60)
            //   .attr("text-anchor", "start")
            //   .text(score_string);

          })  // end of on mouseover


          // mouseout to undo the mouseover
          circles.on("mouseout", function () { // first argument is always a string for the event. second arg for us is a function

            tooltip.style("visibility","hidden");

            d3.select(this)
              .transition()
              .duration(200)
              .attr("stroke-width", 0)
              .attr("stroke", "none")
              .attr("r", function (d) {
                if (d['boro'] === "Manhattan") {
                  return 2;
                }
                else {
                  return 3;
                }
              })


            map.selectAll(".label")
              .attr("opacity", 0);

            map.selectAll(".rect")
              .attr('width', 0)
              .attr('height', 0)
              .attr('stroke', 'none')
              .attr('fill', 'none');
          }) // end of mouseout


        };  // END OF UPDATE MAP FUNCTION

            
        updateMap();

        // filter
        d3.select("#boroFilter").on("change", function () {
            selectedBoro = this.value;
            console.log(selectedBoro)
            updateMap();
        });

        d3.select("#scoreFilter").on("change", function () {
            selectedScore = this.value;
            console.log(selectedScore)
            updateMap();
        });


        }).catch(error => console.error("Error loading data:", error)); //end of data fetching
          

        // let circles = map.selectAll("circle")  //select all circle elements
        //     .data(rest_objs)
        //     .join("circle") //does all the updating and such for you
        //     .attr("r", function (d) {
        //       if(d['boro'] === "Manhattan"){  // make the manhattan dots smaller since there's so many
        //         return 2;
        //       }
        //       else{
        //         return 3;
        //       }
        //     })
        //     .attr("cx", function (d) {
        //       var xpos = d.long;
        //       var ypos = d.lat;
        //       var circlePosition = projection( [xpos,  ypos] );
        //       if(xpos === null || ypos === null || circlePosition === null){
        //         return;
        //       }
        //       return circlePosition[0];
        //     }) 
        //     .attr("cy", function (d) {
        //       var xpos = d.long;
        //       var ypos = d.lat;
        //       var circlePosition = projection( [xpos,  ypos] );
        //       if(xpos === null || ypos === null || circlePosition === null){
        //         return;
        //       }
        //       return circlePosition[1];
        //     })
        //     .attr("fill", "black")  
                
      



            
        updateMap();

        // filter
        d3.select("#boroFilter").on("change", function () {
            selectedBoro = this.value;
            console.log(selectedBoro)
            updateMap();
        });

        d3.select("#scoreFilter").on("change", function () {
            selectedScore = this.value;
            console.log(selectedScore)
            updateMap();
        });


        }).catch(error => console.error("Error loading data:", error)); //end of data fetching
          


        } // end of request data 


      
      requestData();
      
      
      
      </script>
      

    
    
      </div>
    </body>
    </html>
    